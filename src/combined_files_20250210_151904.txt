Directory Contents 
Folder PATH listing
Volume serial number is 5417-4FD3
C:.
|   combined_files_20250210_151904.txt
|   combine_files.bat
|   
+---app
|   |   globals.css
|   |   layout.tsx
|   |   not-found.tsx
|   |   
|   +---(auth)
|   |   +---courses
|   |   +---create
|   |   |       page.tsx
|   |   |       
|   |   \---guides
|   +---(public)
|   |   |   page.tsx
|   |   |   
|   |   +---community
|   |   |       page.tsx
|   |   |       
|   |   \---mission
|   |           page.tsx
|   |           
|   +---(shared)
|   |   +---courses
|   |   |       page.tsx
|   |   |       
|   |   \---guides
|   |           page.tsx
|   |           
|   \---api
|       +---courses
|       |   +---generate
|       |   |       route.ts
|       |   |       
|       |   +---save
|       |   |       route.ts
|       |   |       
|       |   \---[id]
|       |           route.ts
|       |           
|       \---generate
|               route.ts
|               
+---components
|   +---auth
|   |       ContentSpecificationForm.tsx
|   |       CreateCourseButton.tsx
|   |       CreateCourseWizard.tsx
|   |       DraggableModule.tsx
|   |       GuideGrid.tsx
|   |       GuideSidebar.tsx
|   |       LoadingState.tsx
|   |       ModuleContentPreview.tsx
|   |       ModuleList.tsx
|   |       QuizView.tsx
|   |       StudentModuleView.tsx
|   |       
|   +---public
|   |       AboutTrail.tsx
|   |       CallToAction.tsx
|   |       Features.tsx
|   |       Hero.tsx
|   |       Logo.tsx
|   |       
|   \---shared
|       |   CourseGrid.tsx
|       |   CoursesSidebar.tsx
|       |   Footer.tsx
|       |   Navbar.tsx
|       |   Popup.tsx
|       |   
|       \---ui
|               accordion.tsx
|               alert-dialog.tsx
|               alert.tsx
|               aspect-ratio.tsx
|               avatar.tsx
|               badge.tsx
|               breadcrumb.tsx
|               button.tsx
|               calendar.tsx
|               card.tsx
|               carousel.tsx
|               chart.tsx
|               checkbox.tsx
|               collapsible.tsx
|               command.tsx
|               context-menu.tsx
|               dialog.tsx
|               drawer.tsx
|               dropdown-menu.tsx
|               form.tsx
|               hover-card.tsx
|               input-otp.tsx
|               input.tsx
|               label.tsx
|               menubar.tsx
|               navigation-menu.tsx
|               pagination.tsx
|               popover.tsx
|               progress.tsx
|               radio-group.tsx
|               resizable.tsx
|               scroll-area.tsx
|               select.tsx
|               separator.tsx
|               sheet.tsx
|               sidebar.tsx
|               skeleton.tsx
|               slider.tsx
|               sonner.tsx
|               switch.tsx
|               table.tsx
|               tabs.tsx
|               textarea.tsx
|               toast.tsx
|               toaster.tsx
|               toggle-group.tsx
|               toggle.tsx
|               tooltip.tsx
|               use-mobile.tsx
|               use-toast.ts
|               
\---lib
        aiService.ts
        courseService.ts
        courseTemplate.ts
        utils.ts
        
 
===================================== 
 
File: globals.css 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\app\ 
-------------------------------------------- 
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 45, 79, 30;
  --background-rgb: 250, 246, 241;
  --accent-rgb: 139, 69, 19;
}

body {
  color: rgb(var(--foreground-rgb));
  background: rgb(var(--background-rgb));
}

@layer utilities {
  .rounded-xl-2xl {
    border-radius: 1rem 2rem;
  }
  .rounded-2xl-xl {
    border-radius: 2rem 1rem;
  }
}

.bg-\[#2D4F1E\] {
  border-radius: 0 !important;
}

 
===================================== 
 
File: layout.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\app\ 
-------------------------------------------- 
import type { Metadata } from "next"
import { Inter } from "next/font/google"
import "./globals.css"
import type React from "react" // Import React

const inter = Inter({ subsets: ["latin"] })

export const metadata: Metadata = {
  title: "trail academy - AI-Powered Learning Platform",
  description: "Transform any study material into an AI-powered learning experience",
  icons: {
    icon: "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/Airbrush-Image-Enhancer-sF5FhWIUq2tRqLX5OQ3ZvXE5cWPkMS.jpeg",
  },
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  )
}












 
===================================== 
 
File: not-found.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\app\ 
-------------------------------------------- 
import Link from "next/link"
import { Button } from "../components/shared/ui/button"

export default function NotFound() {
  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-[#FAF6F1]">
      <h1 className="text-4xl font-bold text-[#2D4F1E] mb-4">404 - Page Not Found</h1>
      <p className="text-xl text-[#2D4F1E] mb-8">This feature is unavailable in the demo stage. Try again later!</p>
      <Link href="/">
        <Button className="bg-[#2D4F1E] text-white hover:bg-[#4A7A30]">Return to Home</Button>
      </Link>
    </div>
  )
}







 
===================================== 
 
File: page.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\app\(auth)\create\ 
-------------------------------------------- 
"use client"

import Navbar from "@/src/components/shared/Navbar"
import Footer from "@/src/components/shared/Footer"
import { CreateCourseWizard } from "@/src/components/auth/CreateCourseWizard"

export default function CreatePage() {
  return (
    <div className="min-h-screen bg-[#FAF6F1] text-[#2D4F1E]">
      <Navbar />
      <main className="container mx-auto px-4 py-12">
        <h1 className="text-4xl font-bold mb-8">Create a New Course</h1>
        <CreateCourseWizard />
      </main>
      <Footer />
    </div>
  )
}












 
===================================== 
 
File: page.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\app\(public)\ 
-------------------------------------------- 
"use client"

import Navbar from "@/src/components/shared/Navbar"
import Hero from "@/src/components/public/Hero"
import Features from "@/src/components/public/Features"
import AboutTrail from "@/src/components/public/AboutTrail"
import CallToAction from "@/src/components/public/CallToAction"
import Footer from "@/src/components/shared/Footer"

export default function Home() {
  return (
    <div className="min-h-screen bg-[#FAF6F1] text-[#2D4F1E]">
      <Navbar />
      <main>
        <Hero />
        <Features />
        <AboutTrail />
        <CallToAction />
      </main>
      <Footer />
    </div>
  )
}










 
===================================== 
 
File: page.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\app\(public)\community\ 
-------------------------------------------- 
import Navbar from "@/src/components/shared/Navbar"
import Footer from "@/src/components/shared/Footer"
import Link from "next/link"
import { DiscIcon as Discord } from "lucide-react"

export default function CommunityPage() {
  return (
    <div className="min-h-screen bg-[#FAF6F1] text-[#2D4F1E]">
      <Navbar />
      <main className="container mx-auto px-4 py-12">
        <h1 className="text-4xl font-bold mb-8 text-center">Join Our Community</h1>
        <div className="max-w-3xl mx-auto space-y-8">
          <section className="bg-[#2D4F1E] text-[#FAF6F1] p-8 rounded-lg shadow-lg">
            <h2 className="text-2xl font-semibold mb-4">We Need Your Expertise!</h2>
            <p className="text-lg leading-relaxed mb-4">
              Trail Academy is seeking talented frontend and backend developers to help us build the future of
              education. We're particularly interested in developers with:
            </p>
            <ul className="list-disc list-inside space-y-2 mb-4">
              <li>Experience in developing with AI technologies</li>
              <li>Passion for education and learning platforms</li>
              <li>Skills in building user account systems and content management</li>
              <li>Expertise in creating intuitive dashboards and integrations</li>
            </ul>
            <p className="text-lg leading-relaxed">
              Help us complete our backend, implement user accounts, store AI-generated course materials, and create
              robust "guide" saving functionality. We're also developing educator, parent, and child dashboards with
              calendar integrations and grading systems.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mb-4">A Diverse Learning Community</h2>
            <p className="text-lg leading-relaxed">
              Trail Academy's community is a vibrant mix of educators, learners, and parents. Whether you're an
              experienced teacher, a curious student, or a dedicated parent, you'll find a place here to share
              knowledge, seek guidance, and collaborate on educational content.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mb-4">Connect on Discord</h2>
            <p className="text-lg leading-relaxed mb-4">
              Join our Discord server to connect with other community members, participate in discussions, and stay
              updated on the latest developments at Trail Academy.
            </p>
            <Link
              href="https://discord.gg/ZSNpRNfwgp"
              target="_blank"
              rel="noopener noreferrer"
              className="bg-[#5865F2] text-white px-6 py-3 rounded-full text-lg font-semibold hover:bg-[#5865F2]/90 transition-colors inline-flex items-center"
            >
              <Discord className="mr-2 h-5 w-5" />
              Join Our Discord
            </Link>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mb-4">Contribute and Grow</h2>
            <p className="text-lg leading-relaxed">
              At Trail Academy, we believe in the power of community-driven learning. Share your expertise by creating
              courses, offer support to fellow learners, or collaborate on improving our platform. Your contributions
              can make a significant impact on the future of education.
            </p>
          </section>

        </div>
      </main>
      <Footer />
    </div>
  )
}












 
===================================== 
 
File: page.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\app\(public)\mission\ 
-------------------------------------------- 
import Navbar from "@/src/components/shared/Navbar"
import Footer from "@/src/components/shared/Footer"

export default function MissionPage() {
  return (
    <div className="min-h-screen bg-[#FAF6F1] text-[#2D4F1E]">
      <Navbar />
      <main className="container mx-auto px-4 py-12">
        <h1 className="text-4xl font-bold mb-8 text-center">Our Mission</h1>
        <div className="max-w-3xl mx-auto space-y-8">
          <section>
            <h2 className="text-2xl font-semibold mb-4">Empowering Personalized Learning</h2>
            <p className="text-lg leading-relaxed">
              At Trail Academy, we're revolutionizing education by putting the power of course creation in your hands.
              Our platform enables users to import their study materials, describe their learning goals, and create
              custom courses tailored to their specific needs.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mb-4">Flexible and Comprehensive Learning</h2>
            <p className="text-lg leading-relaxed">
              Users can specify the layout and length of their courses, which are then enriched with study notes,
              curated videos, dynamic quizzes, exams, essays, and even practical labs. The platform also allows for the
              integration of user-created content, providing a perfect blend of technology-assisted and human-curated
              educational materials.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mb-4">Customizable Teaching Styles</h2>
            <p className="text-lg leading-relaxed">
              Our unique feature allows users or parents to create their own "teacher" profiles, capable of generating
              alternative content based on preferred teaching styles. This ensures that the learning experience is not
              only comprehensive but also aligns with individual learning preferences.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mb-4">Who We Serve</h2>
            <p className="text-lg leading-relaxed">
              Trail Academy is designed for independent educators, students, and homeschooling parents. Our platform
              caters to those who seek to create custom courses, specifying content depth and duration. Whether you're
              looking to study a technology-enhanced course or an educator-supplemented program, Trail Academy provides
              the tools and flexibility you need.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mb-4">Community-Driven Learning</h2>
            <p className="text-lg leading-relaxed">
              We're building more than just a learning platform; we're cultivating a community. Our "creators" - be they
              educators, experts, or enthusiastic learners - can develop and share custom courses using their own
              content or technology-enhanced materials. This collaborative approach ensures a rich, diverse, and
              constantly evolving library of courses.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold mb-4">Join Us in Shaping the Future of Education</h2>
            <p className="text-lg leading-relaxed">
              We're calling on developers, educators, and visionaries to help us grow this community. By joining Trail
              Academy, you're not just using a platform - you're becoming part of a movement that's redefining how we
              approach learning and education in the digital age.
            </p>
          </section>

          <div className="text-center mt-12">
            <a
              href="/community"
              className="bg-[#2D4F1E] text-[#FAF6F1] px-6 py-3 rounded-full text-lg font-semibold hover:bg-[#2D4F1E]/90 transition-colors"
            >
              Join Our Community
            </a>
          </div>
        </div>
      </main>
      <Footer />
    </div>
  )
}












 
===================================== 
 
File: page.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\app\(shared)\courses\ 
-------------------------------------------- 
import Navbar from "@/src/components/shared/Navbar"
import Footer from "@/src/components/shared/Footer"
import CoursesSidebar from "@/src/components/shared/CoursesSidebar"
import CourseGrid from "@/src/components/shared/CourseGrid"
import CreateCourseButton from "@/src/components/auth/CreateCourseButton"

export default function CoursesPage() {
  return (
    <div className="min-h-screen bg-[#FAF6F1] text-[#2D4F1E]">
      <Navbar />
      <main className="container mx-auto px-4 py-8">
        <div className="flex justify-between items-center mb-8">
          <h1 className="text-4xl font-bold">Explore Courses</h1>
          <CreateCourseButton />
        </div>
        <div className="flex flex-col md:flex-row gap-8">
          <CoursesSidebar />
          <CourseGrid />
        </div>
      </main>
      <Footer />
    </div>
  )
}












 
===================================== 
 
File: page.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\app\(shared)\guides\ 
-------------------------------------------- 
"use client"

import { useState } from "react"
import Navbar from "@/src/components/shared/Navbar"
import Footer from "@/src/components/shared/Footer"
import GuideSidebar from "@/src/components/auth/GuideSidebar"
import GuideGrid from "@/src/components/auth/GuideGrid"
import { Button } from "@/src/components/shared/ui/button"
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/src/components/shared/ui/dialog"

export default function GuidesPage() {
  const [isModalOpen, setIsModalOpen] = useState(true)

  return (
    <div className="min-h-screen bg-[#FAF6F1] text-[#2D4F1E]">
      <Navbar />
      <main className="container mx-auto px-4 py-8">
        <div className="flex justify-between items-center mb-8">
          <h1 className="text-4xl font-bold">Explore Guides</h1>
          <Button onClick={() => setIsModalOpen(true)} className="bg-[#8B4513] text-[#FAF6F1] hover:bg-[#8B4513]/90">
            Contribute a Guide
          </Button>
        </div>
        <div className="flex flex-col md:flex-row gap-8">
          <GuideSidebar />
          <GuideGrid />
        </div>
      </main>
      <Footer />

      <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Help Us Grow Our Community!</DialogTitle>
            <DialogDescription>
              We're looking for passionate educators, learners, and experts to contribute to our guides. Share your
              knowledge and help shape the future of education with Trail Academy.
            </DialogDescription>
          </DialogHeader>
          <div className="mt-4 flex justify-end">
            <Button onClick={() => setIsModalOpen(false)}>Close</Button>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  )
}












 
===================================== 
 
File: route.ts 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\app\api\courses\generate\ 
-------------------------------------------- 
// app/api/courses/generate/route.ts
import { NextResponse } from 'next/server'
import { generateCourse } from '@/src/lib/aiService'

export async function POST(request: Request) {
  try {
    const body = await request.json()
    
    // Validate required fields
    if (!body.title || !body.moduleCount) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      )
    }

    const course = await generateCourse({
      title: body.title,
      description: body.description,
      audience: body.audience,
      moduleCount: body.moduleCount,
      resources: body.resources
    })

    return NextResponse.json({ course })
  } catch (error) {
    console.error('Course generation error:', error)
    return NextResponse.json(
      { error: 'Failed to generate course' },
      { status: 500 }
    )
  }
}











 
===================================== 
 
File: route.ts 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\app\api\courses\save\ 
-------------------------------------------- 
import { NextResponse } from 'next/server'

// This will be replaced with actual database logic later
const courses = new Map()

export async function POST(request: Request) {
  try {
    const course = await request.json()
    const courseId = Date.now().toString() // Temporary ID generation
    
    courses.set(courseId, {
      ...course,
      id: courseId,
      createdAt: new Date().toISOString()
    })

    return NextResponse.json({ 
      success: true, 
      courseId 
    })
  } catch (error) {
    console.error('Error saving course:', error)
    return NextResponse.json(
      { error: 'Failed to save course' },
      { status: 500 }
    )
  }
}










 
===================================== 
 
File: route.ts 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\app\api\courses\[id]\ 
-------------------------------------------- 
import { NextResponse } from 'next/server'

export async function GET(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    // This will be replaced with database query later
    const course = courses.get(params.id)
    
    if (!course) {
      return NextResponse.json(
        { error: 'Course not found' },
        { status: 404 }
      )
    }

    return NextResponse.json(course)
  } catch (error) {
    console.error('Error fetching course:', error)
    return NextResponse.json(
      { error: 'Failed to fetch course' },
      { status: 500 }
    )
  }
} 
===================================== 
 
File: route.ts 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\app\api\generate\ 
-------------------------------------------- 
// app/api/generate/route.ts
import { NextResponse } from 'next/server'
import OpenAI from 'openai'

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
})

export async function POST(request: Request) {
  try {
    const body = await request.json()
    
    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: "You are an expert course creator."
        },
        {
          role: "user",
          content: `Create a course about: ${body.title}. 
            Target audience: ${body.audience}.
            Include ${body.moduleCount} modules.`
        }
      ]
    })

    return NextResponse.json(completion.choices[0].message)
  } catch (error) {
    console.error('Generation error:', error)
    return NextResponse.json({ error: 'Failed to generate course' }, { status: 500 })
  }
}










 
===================================== 
 
File: ContentSpecificationForm.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\auth\ 
-------------------------------------------- 
"use client"

import React, { useState } from 'react'
import { Card, CardContent } from "@/src/components/shared/ui/card"
import { FileText, Link as LinkIcon, X } from 'lucide-react'

interface Resource {
  type: 'link' | 'book' | 'note'
  title: string
  url?: string
  description?: string
}

export function ContentSpecificationForm({ onSubmit }) {
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    audience: '',
    moduleCount: 5,
    resources: [] as Resource[]
  })

  const [newResource, setNewResource] = useState<Resource>({
    type: 'link',
    title: '',
    url: ''
  })

  const addResource = () => {
    if (newResource.title) {
      setFormData({
        ...formData,
        resources: [...formData.resources, newResource]
      })
      setNewResource({ type: 'link', title: '', url: '' })
    }
  }

  return (
    <div className="space-y-6">
      <div>
        <label className="block text-sm font-medium mb-2">Course Title</label>
        <input
          type="text"
          value={formData.title}
          onChange={(e) => setFormData({...formData, title: e.target.value})}
          className="w-full p-2 border rounded-lg"
          placeholder="Enter course title"
        />
      </div>

      <div>
        <label className="block text-sm font-medium mb-2">Description</label>
        <textarea
          value={formData.description}
          onChange={(e) => setFormData({...formData, description: e.target.value})}
          className="w-full p-2 border rounded-lg"
          rows={3}
          placeholder="Describe your course"
        />
      </div>

      <div>
        <label className="block text-sm font-medium mb-2">Target Audience</label>
        <input
          type="text"
          value={formData.audience}
          onChange={(e) => setFormData({...formData, audience: e.target.value})}
          className="w-full p-2 border rounded-lg"
          placeholder="Who is this course for?"
        />
      </div>

      <div>
        <label className="block text-sm font-medium mb-2">Number of Modules</label>
        <input
          type="number"
          value={formData.moduleCount}
          onChange={(e) => setFormData({...formData, moduleCount: parseInt(e.target.value)})}
          className="w-full p-2 border rounded-lg"
          min={1}
          max={20}
        />
      </div>

      <div>
        <label className="block text-sm font-medium mb-2">Add Resources</label>
        <div className="flex gap-2 mb-2">
          <select
            value={newResource.type}
            onChange={(e) => setNewResource({...newResource, type: e.target.value as Resource['type']})}
            className="p-2 border rounded-lg"
          >
            <option value="link">Link</option>
            <option value="book">Book</option>
            <option value="note">Note</option>
          </select>
          <input
            type="text"
            value={newResource.title}
            onChange={(e) => setNewResource({...newResource, title: e.target.value})}
            className="flex-1 p-2 border rounded-lg"
            placeholder="Resource title"
          />
          {newResource.type !== 'note' && (
            <input
              type="text"
              value={newResource.url || ''}
              onChange={(e) => setNewResource({...newResource, url: e.target.value})}
              className="flex-1 p-2 border rounded-lg"
              placeholder="URL or Reference"
            />
          )}
          <button
            onClick={addResource}
            className="bg-[#2D4F1E] text-white px-4 py-2 rounded hover:bg-[#1F3614]"
          >
            Add
          </button>
        </div>
      </div>

      {formData.resources.length > 0 && (
        <div className="space-y-2">
          {formData.resources.map((resource, index) => (
            <div key={index} className="flex items-center justify-between p-2 bg-[#FAF6F1] rounded">
              <div className="flex items-center gap-2">
                {resource.type === 'link' ? <LinkIcon className="w-4 h-4" /> : <FileText className="w-4 h-4" />}
                <span>{resource.title}</span>
              </div>
              <X
                className="w-4 h-4 cursor-pointer hover:text-red-500"
                onClick={() => {
                  const newResources = [...formData.resources]
                  newResources.splice(index, 1)
                  setFormData({...formData, resources: newResources})
                }}
              />
            </div>
          ))}
        </div>
      )}

      <button
        onClick={() => onSubmit(formData)}
        className="w-full bg-[#2D4F1E] text-white px-4 py-2 rounded hover:bg-[#1F3614]"
      >
        Generate Course
      </button>
    </div>
  )
}










 
===================================== 
 
File: CreateCourseButton.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\auth\ 
-------------------------------------------- 
"use client"

import { useState } from "react"
import NextLink from "next/link"
import { Plus } from "lucide-react"
import { Button } from "@/src/components/shared/ui/button"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/src/components/shared/ui/dialog"

export default function CreateCourseButton() {
  return (
    <NextLink href="/create">
      <Button 
        className="bg-[#8B4513] text-[#FAF6F1] hover:bg-[#8B4513]/90"
      >
        <Plus className="mr-2 h-4 w-4" /> Create Course
      </Button>
    </NextLink>
  )
}











 
===================================== 
 
File: CreateCourseWizard.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\auth\ 
-------------------------------------------- 
"use client"

import { useState } from 'react'
import { Card, CardContent } from "@/src/components/shared/ui/card"
import { BookOpen, GraduationCap, Eye } from 'lucide-react'
import { ContentSpecificationForm } from './ContentSpecificationForm'
import { LoadingState } from './LoadingState'
import { StudentModuleView } from './StudentModuleView'
import { Button } from "@/src/components/shared/ui/button"
import { createCourse } from '@/src/lib/courseService'
import { ModuleList } from './ModuleList'

export function CreateCourseWizard() {
  const [step, setStep] = useState('type')
  const [isGenerating, setIsGenerating] = useState(false)
  const [courseData, setCourseData] = useState(null)
  const [courseType, setCourseType] = useState(null)
  const [isPreviewMode, setIsPreviewMode] = useState(false)

  // Define state for preview module
  const [previewModule, setPreviewModule] = useState(null)

  const handleGenerate = async (specs) => {
    setIsGenerating(true)
    try {
      const { course } = await createCourse({
        ...specs,
        courseType
      })
      setCourseData(course)
      setStep('preview')
    } catch (error) {
      console.error('Course creation error:', error)
    } finally {
      setIsGenerating(false)
    }
  }

  if (isGenerating) {
    return <LoadingState task="Generating course content..." />
  }

  return (
    <div className="max-w-4xl mx-auto">
      {step === 'type' && (
        <div className="space-y-6">
          <h2 className="text-2xl font-semibold text-center mb-8">Choose Your Course Type</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card 
              className="border-2 border-[#2D4F1E] hover:shadow-lg transition-all cursor-pointer"
              onClick={() => {
                setCourseType('traditional')
                setStep('specs')
              }}
            >
              <CardContent className="p-6 text-center">
                <BookOpen className="w-16 h-16 mx-auto text-[#2D4F1E] mb-4" />
                <h3 className="text-xl font-semibold mb-2">Traditional Course</h3>
                <p className="text-gray-600">
                  Balanced learning approach with equal weight on participation, assignments, and assessments.
                </p>
              </CardContent>
            </Card>

            <Card 
              className="border-2 border-[#2D4F1E] hover:shadow-lg transition-all cursor-pointer"
              onClick={() => {
                setCourseType('college')
                setStep('specs')
              }}
            >
              <CardContent className="p-6 text-center">
                <GraduationCap className="w-16 h-16 mx-auto text-[#2D4F1E] mb-4" />
                <h3 className="text-xl font-semibold mb-2">College Course</h3>
                <p className="text-gray-600">
                  Academic structure with emphasis on midterm and final examinations.
                </p>
              </CardContent>
            </Card>
          </div>
        </div>
      )}

      {step === 'preview' && courseData && (
        <StudentModuleView 
          modules={courseData.modules}
          onBack={() => setStep('specs')}
        />
      )}

      {step === 'specs' && (
        <div className="space-y-6">
          <div className="flex items-center justify-between mb-6">
            <button 
              onClick={() => setStep('type')}
              className="text-[#2D4F1E] hover:underline"
            >
              ← Back to Course Type
            </button>
            <span className="text-gray-600">
              {courseType === 'traditional' ? 'Traditional Course' : 'College Course'}
            </span>
          </div>
          <Card className="border-2 border-[#2D4F1E]">
            <CardContent className="p-6">
              <ContentSpecificationForm onSubmit={handleGenerate} />
            </CardContent>
          </Card>
        </div>
      )}

      {step === 'preview' && courseData && (
        <div className="space-y-6">
          <div className="flex items-center justify-between mb-6">
            <button 
              onClick={() => setStep('specs')}
              className="text-[#2D4F1E] hover:underline"
            >
              ← Back to Specifications
            </button>
            <h2 className="text-2xl font-semibold">Course Preview</h2>
          </div>
          
          <ModuleList 
            initialModules={courseData.modules} 
            onViewContent={setPreviewModule}
          />
          
          {previewModule && (
            <ModuleContentPreview
              module={previewModule}
              isOpen={true}
              onClose={() => setPreviewModule(null)}
            />
          )}
        </div>
      )}
    </div>
  )
}











 
===================================== 
 
File: DraggableModule.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\auth\ 
-------------------------------------------- 
import { useState } from 'react'
import { Card, CardContent } from "@/src/components/shared/ui/card"
import { DragHandleDots2Icon } from '@radix-ui/react-icons'
import { motion, AnimatePresence, Reorder } from 'framer-motion'
import { CheckCircle2, XCircle, Book, Video, Calendar, GripVertical, Eye } from 'lucide-react'

export function DraggableModule({ module, index, onMoveModule }) {
  const [showQuiz, setShowQuiz] = useState(false)
  const [selectedAnswers, setSelectedAnswers] = useState({})
  const [showExplanations, setShowExplanations] = useState({})

  const handleAnswerSelect = (questionId, answerIndex) => {
    setSelectedAnswers(prev => ({
      ...prev,
      [questionId]: answerIndex
    }))
    setShowExplanations(prev => ({
      ...prev,
      [questionId]: true
    }))
  }

  const getAnswerStyle = (questionId, answerIndex) => {
    if (!showExplanations[questionId]) return "bg-white"
    
    const isSelected = selectedAnswers[questionId] === answerIndex
    const isCorrect = module.quiz.questions[questionId].correct === answerIndex
    
    if (isSelected && isCorrect) return "bg-green-100 border-green-500"
    if (isSelected && !isCorrect) return "bg-red-100 border-red-500"
    if (!isSelected && isCorrect && showExplanations[questionId]) 
      return "bg-green-50 border-green-500"
    
    return "bg-white"
  }

  return (
    <motion.div
      layout
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      className="relative"
    >
      <Card className="border-2 border-[#2D4F1E] hover:shadow-lg transition-all">
        <CardContent className="p-6">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-xl font-semibold text-[#2D4F1E]">
              {module.title}
            </h3>
            <div className="flex items-center gap-2">
              <button 
                className="p-2 hover:bg-[#FAF6F1] rounded-full transition-colors"
                onClick={() => onMoveModule(index, 'up')}
              >
                ↑
              </button>
              <button 
                className="p-2 hover:bg-[#FAF6F1] rounded-full transition-colors"
                onClick={() => onMoveModule(index, 'down')}
              >
                ↓
              </button>
              <DragHandleDots2Icon className="h-6 w-6 text-[#2D4F1E] cursor-move" />
            </div>
          </div>

          <p className="text-gray-600 mb-4">{module.description}</p>

          <div className="grid grid-cols-2 gap-4">
            {/* Content sections */}
            <div className="space-y-4">
              <div className="bg-[#FAF6F1] p-4 rounded-lg">
                <div className="flex items-center gap-2 mb-2">
                  <Book className="text-[#2D4F1E]" />
                  <h4 className="font-medium">Readings</h4>
                </div>
                {module.content.readings.map((reading, i) => (
                  <div key={i} className="flex justify-between items-center py-2">
                    <span>{reading.title}</span>
                    <span className="text-sm text-gray-600">{reading.pages}</span>
                  </div>
                ))}
              </div>

              <div className="bg-[#FAF6F1] p-4 rounded-lg">
                <div className="flex items-center gap-2 mb-2">
                  <Video className="text-[#2D4F1E]" />
                  <h4 className="font-medium">Videos</h4>
                </div>
                {module.content.videos.map((video, i) => (
                  <div key={i} className="flex justify-between items-center py-2">
                    <span>{video.title}</span>
                    <span className="text-sm text-gray-600">{video.duration}</span>
                  </div>
                ))}
              </div>
            </div>

            {/* Quiz section */}
            <div>
              <button
                onClick={() => setShowQuiz(!showQuiz)}
                className="w-full bg-[#2D4F1E] text-white px-4 py-2 rounded-lg hover:bg-[#1F3614] transition-colors mb-4"
              >
                {showQuiz ? 'Hide Quiz' : 'Show Quiz'}
              </button>

              <AnimatePresence>
                {showQuiz && (
                  <motion.div
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: 'auto' }}
                    exit={{ opacity: 0, height: 0 }}
                    className="space-y-4"
                  >
                    {module.quiz.questions.map((question, qIndex) => (
                      <div key={qIndex} className="bg-[#FAF6F1] p-4 rounded-lg">
                        <p className="font-medium mb-3">{question.question}</p>
                        <div className="space-y-2">
                          {question.options.map((option, oIndex) => (
                            <button
                              key={oIndex}
                              onClick={() => handleAnswerSelect(qIndex, oIndex)}
                              className={`w-full text-left p-3 rounded border-2 transition-colors ${
                                getAnswerStyle(qIndex, oIndex)
                              }`}
                            >
                              <div className="flex items-center justify-between">
                                <span>{option}</span>
                                {showExplanations[qIndex] && selectedAnswers[qIndex] === oIndex && (
                                  question.correct === oIndex 
                                    ? <CheckCircle2 className="text-green-500" />
                                    : <XCircle className="text-red-500" />
                                )}
                              </div>
                            </button>
                          ))}
                        </div>
                        {showExplanations[qIndex] && (
                          <motion.div
                            initial={{ opacity: 0 }}
                            animate={{ opacity: 1 }}
                            className="mt-3 p-3 bg-white rounded"
                          >
                            <p className="text-sm text-gray-600">{question.explanation}</p>
                          </motion.div>
                        )}
                      </div>
                    ))}
                  </motion.div>
                )}
              </AnimatePresence>
            </div>
          </div>
        </CardContent>
      </Card>
    </motion.div>
  )
}










 
===================================== 
 
File: GuideGrid.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\auth\ 
-------------------------------------------- 
import { Clock, User, ThumbsUp, BookOpen } from "lucide-react"

const guides = [
  {
    id: 1,
    title: "Getting Started with Trail Academy",
    description: "Learn how to navigate the platform and create your first course.",
    author: "Trail Team",
    readTime: "5 min read",
    likes: 120,
    category: "Getting Started",
  },
  {
    id: 2,
    title: "Best Practices for Course Creation",
    description: "Tips and tricks for creating engaging and effective courses.",
    author: "Education Expert",
    readTime: "10 min read",
    likes: 85,
    category: "Course Creation",
  },
  {
    id: 3,
    title: "Leveraging AI in Your Courses",
    description: "How to use AI-generated content to enhance your teaching materials.",
    author: "AI Specialist",
    readTime: "8 min read",
    likes: 150,
    category: "Course Creation",
  },
  {
    id: 4,
    title: "Customizing Your Learning Experience",
    description: "Tailor Trail Academy to fit your unique learning style and goals.",
    author: "Learning Strategist",
    readTime: "7 min read",
    likes: 95,
    category: "Learning Strategies",
  },
  {
    id: 5,
    title: "Effective Note-taking Strategies",
    description: "Improve your learning with these proven note-taking techniques.",
    author: "Study Skills Coach",
    readTime: "6 min read",
    likes: 110,
    category: "Learning Strategies",
  },
  {
    id: 6,
    title: "Integrating Trail Academy with LMS",
    description: "Step-by-step guide to integrate Trail Academy with your Learning Management System.",
    author: "Tech Integration Specialist",
    readTime: "12 min read",
    likes: 75,
    category: "Technical Guides",
  },
]

export default function GuideGrid() {
  return (
    <div className="flex-1">
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {guides.map((guide) => (
          <div
            key={guide.id}
            className="bg-white rounded-2xl shadow-md overflow-hidden hover:shadow-lg transition-shadow"
          >
            <div className="p-6">
              <h3 className="text-lg font-semibold mb-2">{guide.title}</h3>
              <p className="text-gray-600 mb-4">{guide.description}</p>
              <div className="flex items-center text-sm text-gray-500 mb-2">
                <User className="w-4 h-4 mr-1" />
                <span>{guide.author}</span>
              </div>
              <div className="flex items-center text-sm text-gray-500 mb-2">
                <Clock className="w-4 h-4 mr-1" />
                <span>{guide.readTime}</span>
              </div>
              <div className="flex items-center text-sm text-gray-500 mb-2">
                <ThumbsUp className="w-4 h-4 mr-1" />
                <span>{guide.likes} likes</span>
              </div>
              <div className="flex items-center text-sm text-[#2D4F1E]">
                <BookOpen className="w-4 h-4 mr-1" />
                <span>{guide.category}</span>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  )
}












 
===================================== 
 
File: GuideSidebar.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\auth\ 
-------------------------------------------- 
import { ChevronDown } from "lucide-react"

const categories = [
  { name: "Getting Started", subcategories: ["Platform Basics", "Course Creation", "Learning Tips"] },
  { name: "Course Creation", subcategories: ["Content Upload", "AI Integration", "Customization"] },
  { name: "Learning Strategies", subcategories: ["Time Management", "Note-taking", "Exam Preparation"] },
  { name: "Technical Guides", subcategories: ["API Usage", "Integration", "Troubleshooting"] },
  { name: "Community", subcategories: ["Collaboration", "Networking", "Events"] },
]

export default function GuideSidebar() {
  return (
    <aside className="w-full md:w-64 bg-white rounded-2xl p-4 shadow-md">
      <h2 className="text-xl font-semibold mb-4">Guide Categories</h2>
      <ul className="space-y-2">
        {categories.map((category) => (
          <li key={category.name} className="mb-2">
            <details className="group">
              <summary className="flex items-center justify-between cursor-pointer">
                <span>{category.name}</span>
                <ChevronDown className="h-5 w-5 transform group-open:rotate-180 transition-transform" />
              </summary>
              <ul className="mt-2 ml-4 space-y-1">
                {category.subcategories.map((subcategory) => (
                  <li key={subcategory}>
                    <a href="#" className="text-sm hover:text-[#8B4513] transition-colors">
                      {subcategory}
                    </a>
                  </li>
                ))}
              </ul>
            </details>
          </li>
        ))}
      </ul>
    </aside>
  )
}












 
===================================== 
 
File: LoadingState.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\auth\ 
-------------------------------------------- 
"use client"

import { Layout, BookOpen, FileText, Video, Brain } from 'lucide-react'

export function LoadingState({ task }) {
  const steps = [
    { icon: Layout, text: "Structuring course outline..." },
    { icon: BookOpen, text: "Generating learning materials..." },
    { icon: FileText, text: "Creating assessments..." },
    { icon: Video, text: "Curating video content..." },
    { icon: Brain, text: "Finalizing course content..." }
  ]

  const currentStepIndex = steps.findIndex(step => 
    step.text.toLowerCase().includes(task?.toLowerCase())
  ) || 0

  return (
    <div className="min-h-[400px] flex flex-col items-center justify-center p-8">
      <div className="w-full max-w-md space-y-8">
        <h2 className="text-2xl font-bold text-center mb-8">Generating Your Course</h2>
        
        <div className="space-y-6">
          {steps.map((step, index) => {
            const Icon = step.icon
            const isCurrentStep = index === currentStepIndex
            const isCompleted = index < currentStepIndex

            return (
              <div 
                key={index}
                className={`flex items-center space-x-4 transition-all duration-500 ${
                  isCurrentStep ? 'scale-105' : ''
                }`}
              >
                <div className={`
                  p-2 rounded-full
                  ${isCompleted ? 'bg-green-100 text-green-600' : 
                    isCurrentStep ? 'bg-[#FAF6F1] text-[#2D4F1E] animate-pulse' : 
                    'bg-gray-100 text-gray-400'}
                `}>
                  <Icon size={24} />
                </div>
                <span className={`
                  ${isCompleted ? 'text-green-600' : 
                    isCurrentStep ? 'text-[#2D4F1E]' : 
                    'text-gray-400'}
                `}>
                  {step.text}
                </span>
                {isCompleted && (
                  <span className="text-green-600">✓</span>
                )}
              </div>
            )
          })}
        </div>

        <div className="mt-8 text-center text-gray-600">
          This might take a minute...
        </div>
      </div>
    </div>
  )
}











 
===================================== 
 
File: ModuleContentPreview.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\auth\ 
-------------------------------------------- 
"use client"

import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/src/components/shared/ui/dialog"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/src/components/shared/ui/tabs"
import { QuizView } from './QuizView'

export function ModuleContentPreview({ module, isOpen, onClose }) {
  if (!module) return null

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl h-[80vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>{module.title}</DialogTitle>
        </DialogHeader>
        
        <Tabs defaultValue="content" className="mt-4">
          <TabsList>
            <TabsTrigger value="content">Content</TabsTrigger>
            <TabsTrigger value="readings">Readings</TabsTrigger>
            <TabsTrigger value="videos">Videos</TabsTrigger>
            <TabsTrigger value="quiz">Quiz</TabsTrigger>
          </TabsList>

          <TabsContent value="content" className="prose max-w-none">
            <p className="whitespace-pre-wrap">{module.content.lecture}</p>
          </TabsContent>

          <TabsContent value="readings">
            <div className="space-y-4">
              {module.content.readings.map((reading, index) => (
                <div key={index} className="p-4 bg-[#FAF6F1] rounded-lg">
                  <h4 className="font-medium">{reading.title}</h4>
                  <p className="text-sm text-gray-600">Pages: {reading.pages}</p>
                </div>
              ))}
            </div>
          </TabsContent>

          <TabsContent value="videos">
            <div className="space-y-4">
              {module.content.videos.map((video, index) => (
                <div key={index} className="p-4 bg-[#FAF6F1] rounded-lg">
                  <h4 className="font-medium">{video.title}</h4>
                  <p className="text-sm text-gray-600">Duration: {video.duration}</p>
                </div>
              ))}
            </div>
          </TabsContent>

          <TabsContent value="quiz">
            <QuizView questions={module.quiz.questions} />
          </TabsContent>
        </Tabs>
      </DialogContent>
    </Dialog>
  )
}










 
===================================== 
 
File: ModuleList.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\auth\ 
-------------------------------------------- 
"use client"

import { useState } from 'react'
import { DragDropContext, Droppable, Draggable } from '@hello-pangea/dnd'
import { DraggableModule } from './DraggableModule'

export function ModuleList({ initialModules, onViewContent }) {
  const [modules, setModules] = useState(initialModules)

  const handleDragEnd = (result) => {
    if (!result.destination) return

    const items = Array.from(modules)
    const [reorderedItem] = items.splice(result.source.index, 1)
    items.splice(result.destination.index, 0, reorderedItem)

    setModules(items)
  }

  return (
    <DragDropContext onDragEnd={handleDragEnd}>
      <Droppable droppableId="modules">
        {(provided) => (
          <div
            {...provided.droppableProps}
            ref={provided.innerRef}
            className="space-y-6"
          >
            {modules.map((module, index) => (
              <Draggable 
                key={module.id || index} 
                draggableId={String(module.id || index)} 
                index={index}
              >
                {(provided, snapshot) => (
                  <div
                    ref={provided.innerRef}
                    {...provided.draggableProps}
                    {...provided.dragHandleProps}
                    className={`transition-shadow ${snapshot.isDragging ? 'shadow-2xl' : ''}`}
                  >
                    <DraggableModule
                      module={module}
                      index={index}
                      onViewContent={() => onViewContent(module)}
                    />
                  </div>
                )}
              </Draggable>
            ))}
            {provided.placeholder}
          </div>
        )}
      </Droppable>
    </DragDropContext>
  )
}










 
===================================== 
 
File: QuizView.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\auth\ 
-------------------------------------------- 
"use client"

import { useState } from 'react'
import { Card, CardContent } from "@/src/components/shared/ui/card"
import { CheckCircle2, XCircle, AlertCircle, ChevronRight, ChevronLeft, Award } from 'lucide-react'

interface Question {
  question: string
  options: string[]
  correct: number
  explanation: string
}

interface QuizViewProps {
  questions: Question[]
  onComplete?: (score: number) => void
  onBack?: () => void
}

export function QuizView({ questions, onComplete, onBack }: QuizViewProps) {
  const [currentIndex, setCurrentIndex] = useState(0)
  const [answers, setAnswers] = useState<number[]>(Array(questions.length).fill(-1))
  const [showExplanation, setShowExplanation] = useState(false)
  const [isComplete, setIsComplete] = useState(false)

  const currentQuestion = questions[currentIndex]

  const handleAnswer = (optionIndex: number) => {
    if (showExplanation) return
    
    const newAnswers = [...answers]
    newAnswers[currentIndex] = optionIndex
    setAnswers(newAnswers)
    setShowExplanation(true)
  }

  const nextQuestion = () => {
    if (currentIndex < questions.length - 1) {
      setCurrentIndex(currentIndex + 1)
      setShowExplanation(false)
    } else if (!isComplete) {
      const score = answers.reduce((acc, answer, idx) => 
        acc + (answer === questions[idx].correct ? 1 : 0), 0
      )
      setIsComplete(true)
      onComplete?.(score)
    }
  }

  const getScore = () => {
    return (answers.filter((answer, idx) => answer === questions[idx].correct).length / questions.length) * 100
  }

  if (isComplete) {
    const score = getScore()
    return (
      <Card className="max-w-2xl mx-auto">
        <CardContent className="p-8 text-center">
          <Award className="w-16 h-16 mx-auto mb-4 text-[#2D4F1E]" />
          <h2 className="text-2xl font-bold mb-4">Quiz Complete!</h2>
          <div className="text-6xl font-bold text-[#2D4F1E] mb-4">
            {score.toFixed(0)}%
          </div>
          <p className="text-gray-600 mb-6">
            {answers.filter((a, i) => a === questions[i].correct).length} out of {questions.length} correct
          </p>
          <div className="space-x-4">
            <button
              onClick={() => {
                setIsComplete(false)
                setCurrentIndex(0)
                setAnswers(Array(questions.length).fill(-1))
                setShowExplanation(false)
              }}
              className="bg-[#2D4F1E] text-white px-6 py-2 rounded hover:bg-[#1F3614]"
            >
              Try Again
            </button>
            <button
              onClick={onBack}
              className="border-2 border-[#2D4F1E] px-6 py-2 rounded hover:bg-[#FAF6F1]"
            >
              Back to Module
            </button>
          </div>
        </CardContent>
      </Card>
    )
  }

  return (
    <div className="space-y-6">
      <Card className="border-2 border-[#2D4F1E]">
        <CardContent className="p-6">
          <h3 className="text-xl font-semibold mb-6">{currentQuestion.question}</h3>
          
          <div className="space-y-3">
            {currentQuestion.options.map((option, idx) => (
              <button
                key={idx}
                onClick={() => handleAnswer(idx)}
                disabled={showExplanation}
                className={`w-full text-left p-4 rounded transition-all ${
                  showExplanation
                    ? idx === currentQuestion.correct
                      ? 'bg-green-100'
                      : answers[currentIndex] === idx
                        ? 'bg-red-100'
                        : 'bg-gray-50'
                    : answers[currentIndex] === idx
                      ? 'bg-[#2D4F1E] text-white'
                      : 'bg-[#FAF6F1] hover:bg-[#2D4F1E]/10'
                }`}
              >
                {option}
              </button>
            ))}
          </div>

          {showExplanation && (
            <div className="mt-6 p-4 rounded bg-[#FAF6F1]">
              <div className="flex items-start gap-3">
                <AlertCircle className="w-5 h-5 mt-0.5 text-[#2D4F1E]" />
                <p className="text-gray-600">{currentQuestion.explanation}</p>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      <div className="flex justify-between">
        {currentIndex > 0 && (
          <button
            onClick={() => {
              setCurrentIndex(currentIndex - 1)
              setShowExplanation(answers[currentIndex - 1] !== -1)
            }}
            className="flex items-center gap-2"
          >
            <ChevronLeft /> Previous
          </button>
        )}
        
        {showExplanation && (
          <button
            onClick={nextQuestion}
            className="bg-[#2D4F1E] text-white px-6 py-2 rounded hover:bg-[#1F3614] ml-auto flex items-center gap-2"
          >
            {currentIndex === questions.length - 1 ? 'Complete Quiz' : 'Next Question'}
            <ChevronRight />
          </button>
        )}
      </div>
    </div>
  )
}










 
===================================== 
 
File: StudentModuleView.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\auth\ 
-------------------------------------------- 
"use client"

import { useState } from 'react'
import { Card, CardContent } from "@/src/components/shared/ui/card"
import { ModuleList } from './ModuleList'
import { Book, Video, Calendar, ArrowLeft, ArrowRight } from 'lucide-react'
import { QuizView } from './QuizView'
import type { Module } from '@/src/lib/courseTemplate'

interface StudentModuleViewProps {
  modules: Module[]
  onBack: () => void
}

export function StudentModuleView({ modules, onBack }: StudentModuleViewProps) {
  const [currentModuleIndex, setCurrentModuleIndex] = useState(0)
  const [activeTab, setActiveTab] = useState('content')
  
  const currentModule = modules[currentModuleIndex]

  const tabs = [
    { id: 'content', label: 'Content' },
    { id: 'readings', label: 'Readings' },
    { id: 'videos', label: 'Videos' },
    { id: 'quiz', label: 'Quiz' }
  ]

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <button 
          onClick={onBack}
          className="text-[#2D4F1E] hover:underline"
        >
          ← Back to Overview
        </button>
      </div>

      <ModuleList initialModules={modules} />
    </div>
  )

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <button 
          onClick={onBack}
          className="flex items-center gap-2 text-[#2D4F1E] hover:underline"
        >
          <ArrowLeft size={20} />
          Back to Overview
        </button>

        <div className="flex items-center gap-4">
          <button
            onClick={() => setCurrentModuleIndex(prev => Math.max(0, prev - 1))}
            disabled={currentModuleIndex === 0}
            className="disabled:opacity-50"
          >
            <ArrowLeft size={20} />
          </button>
          <span className="font-medium">
            Module {currentModuleIndex + 1} of {modules.length}
          </span>
          <button
            onClick={() => setCurrentModuleIndex(prev => Math.min(modules.length - 1, prev + 1))}
            disabled={currentModuleIndex === modules.length - 1}
            className="disabled:opacity-50"
          >
            <ArrowRight size={20} />
          </button>
        </div>
      </div>

      <Card className="border-2 border-[#2D4F1E]">
        <CardContent className="p-6">
          <h2 className="text-2xl font-bold mb-2">{currentModule.title}</h2>
          <p className="text-gray-600 mb-6">{currentModule.description}</p>

          <div className="flex gap-2 mb-6 border-b">
            {tabs.map(tab => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`px-4 py-2 capitalize ${
                  activeTab === tab.id 
                    ? 'border-b-2 border-[#2D4F1E] font-medium' 
                    : 'text-gray-600 hover:text-[#2D4F1E]'
                }`}
              >
                {tab.label}
              </button>
            ))}
          </div>

          {activeTab === 'content' && (
            <div className="prose max-w-none">
              <p className="whitespace-pre-wrap">{currentModule.content.lecture}</p>
            </div>
          )}

          {activeTab === 'readings' && (
            <div className="space-y-4">
              {currentModule.content.readings.map((reading, index) => (
                <Card key={index} className="hover:shadow-md transition-shadow">
                  <CardContent className="p-4">
                    <div className="flex items-center gap-2">
                      <Book className="h-5 w-5 text-[#2D4F1E]" />
                      <h3 className="font-medium">{reading.title}</h3>
                    </div>
                    {reading.pages && <p className="text-sm text-gray-600 mt-2">Pages: {reading.pages}</p>}
                  </CardContent>
                </Card>
              ))}
            </div>
          )}

          {activeTab === 'videos' && (
            <div className="space-y-4">
              {currentModule.content.videos.map((video, index) => (
                <Card key={index} className="hover:shadow-md transition-shadow">
                  <CardContent className="p-4">
                    <div className="flex items-center gap-2">
                      <Video className="h-5 w-5 text-[#2D4F1E]" />
                      <h3 className="font-medium">{video.title}</h3>
                    </div>
                    <p className="text-sm text-gray-600 mt-2">Duration: {video.duration}</p>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}

          {activeTab === 'quiz' && (
            <QuizView 
              questions={currentModule.quiz.questions}
              onComplete={(score) => {
                console.log('Quiz completed with score:', score)
                // Handle quiz completion
              }}
              onBack={() => setActiveTab('content')}
            />
          )}
        </CardContent>
      </Card>
    </div>
  )
}












 
===================================== 
 
File: AboutTrail.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\public\ 
-------------------------------------------- 
import { ArrowRight } from "lucide-react"
import Link from "next/link"

export default function AboutTrail() {
  return (
    <section className="py-20 bg-gradient-to-br from-[#2D4F1E]/10 to-[#8B4513]/10">
      <div className="container mx-auto px-4">
        <div className="max-w-4xl mx-auto">
          <h2 className="text-3xl font-bold text-center mb-8">Empowering Personalized Learning Journeys</h2>
          <div className="mb-12 text-lg leading-relaxed">
            <p className="mb-4">
              Trail Academy revolutionizes education by putting the power of AI-driven course creation in your hands.
              Whether you're a homeschooling parent, an independent learner, or an educator, our platform transforms
              your study materials into engaging, customized learning experiences.
            </p>
            <p className="mb-4">
              With Trail Academy, you can create dynamic courses tailored to your unique learning style and goals.
              Import your study materials, customize your learning path, and let our AI generate comprehensive study
              guides, quizzes, and more.
            </p>
            <p>Our platform adapts to your needs, allowing you to:</p>
          </div>
          <div className="space-y-6">
            <div className="flex items-start">
              <div className="flex-shrink-0 w-12 h-12 bg-[#2D4F1E] rounded-full flex items-center justify-center text-white font-bold text-xl">
                1
              </div>
              <div className="ml-4">
                <h3 className="text-xl font-semibold mb-2">Design Custom Courses</h3>
                <p>
                  Create courses of any length and difficulty, perfectly suited to your learning needs and pace. Adjust
                  modules, content depth, and duration with ease.
                </p>
              </div>
            </div>
            <div className="flex items-start">
              <div className="flex-shrink-0 w-12 h-12 bg-[#2D4F1E] rounded-full flex items-center justify-center text-white font-bold text-xl">
                2
              </div>
              <div className="ml-4">
                <h3 className="text-xl font-semibold mb-2">Interact with AI Guides</h3>
                <p>
                  Personalize your learning experience with AI "Teachers" that adapt to your preferred teaching style.
                  Customize their tone, attitude, and approach to match your ideal learning environment.
                </p>
              </div>
            </div>
            <div className="flex items-start">
              <div className="flex-shrink-0 w-12 h-12 bg-[#2D4F1E] rounded-full flex items-center justify-center text-white font-bold text-xl">
                3
              </div>
              <div className="ml-4">
                <h3 className="text-xl font-semibold mb-2">Learn Your Way</h3>
                <p>
                  Perfect for homeschoolers, self-taught professionals, and lifelong learners of all ages. Tailor your
                  educational journey to your specific goals and interests.
                </p>
              </div>
            </div>
          </div>
          <div className="mt-12 text-center">
            <Link
              href="/mission"
              className="inline-flex items-center text-lg font-semibold text-[#2D4F1E] hover:text-[#8B4513] transition-colors"
            >
              Learn more about how Trail Academy works
              <ArrowRight className="ml-2 h-5 w-5" />
            </Link>
          </div>
        </div>
      </div>
    </section>
  )
}












 
===================================== 
 
File: CallToAction.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\public\ 
-------------------------------------------- 
import Link from "next/link"
import { ArrowRight } from "lucide-react"

export default function CallToAction() {
  return (
    <section className="py-20 relative overflow-hidden">
      <div className="absolute inset-0 bg-[#2D4F1E]" />
      <div className="container mx-auto px-4 relative z-10">
        <div className="max-w-3xl mx-auto text-center">
          <h2 className="text-3xl md:text-4xl font-bold mb-4 text-[#FAF6F1]">
            Ready to Transform Your Learning Journey?
          </h2>
          <p className="text-xl mb-8 text-[#FAF6F1]/90">
            Explore courses, create your own, or join our community of learners today.
          </p>
          <div className="flex flex-wrap justify-center gap-4">
            <Link
              href="/courses"
              className="group bg-[#FAF6F1] text-[#2D4F1E] px-6 py-3 rounded-full text-lg font-semibold hover:transform hover:scale-105 transition-all duration-300 flex items-center"
            >
              Explore Courses
              <ArrowRight className="ml-2 h-4 w-4 group-hover:translate-x-1 transition-transform" />
            </Link>
            <Link
              href="/create"
              className="group bg-[#8B4513] text-[#FAF6F1] px-6 py-3 rounded-full text-lg font-semibold hover:bg-[#8B4513]/90 transition-all duration-300 flex items-center"
            >
              Create a Course
              <ArrowRight className="ml-2 h-4 w-4 group-hover:translate-x-1 transition-transform" />
            </Link>
          </div>
        </div>
      </div>
    </section>
  )
}












 
===================================== 
 
File: Features.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\public\ 
-------------------------------------------- 
import { Leaf, Wind, Compass, Mountain } from "lucide-react"

export default function Features() {
  const features = [
    {
      icon: <Leaf className="w-12 h-12 mb-4" />,
      title: "Upload & Generate",
      description: "Import study material and let AI create structured courses.",
    },
    {
      icon: <Wind className="w-12 h-12 mb-4" />,
      title: "Customizable Learning Paths",
      description: "Adjust course length, difficulty, and content.",
    },
    {
      icon: <Compass className="w-12 h-12 mb-4" />,
      title: "AI-Powered Study Tools",
      description: "Automated notes, quizzes, video recommendations, and more.",
    },
    {
      icon: <Mountain className="w-12 h-12 mb-4" />,
      title: "Homeschool & Self-Paced Learning",
      description: "Designed for independent learners and parents.",
    },
  ]

  return (
    <section className="py-20 relative overflow-hidden">
      <div className="absolute inset-0 bg-[#2D4F1E]/5 backdrop-blur-sm" />
      <div className="container mx-auto relative">
        <h2 className="text-3xl font-bold text-center mb-12">Feature Highlights</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 px-4">
          {features.map((feature, index) => (
            <div
              key={index}
              className="flex flex-col items-center text-center bg-white/80 backdrop-blur-sm p-6 rounded-[2rem] shadow-lg hover:transform hover:scale-105 transition-all duration-300 border-t-4 border-[#8B4513] border-opacity-50"
            >
              <div className="text-[#2D4F1E]">{feature.icon}</div>
              <h3 className="text-xl font-semibold mb-2">{feature.title}</h3>
              <p className="text-gray-600">{feature.description}</p>
            </div>
          ))}
        </div>
      </div>
    </section>
  )
}












 
===================================== 
 
File: Hero.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\public\ 
-------------------------------------------- 
'use client'
import Link from "next/link"
import Image from "next/image"
import { useState } from "react"
import { X } from "lucide-react"

export default function Hero() {
  const [showVideo, setShowVideo] = useState(false)

  const toggleVideo = () => setShowVideo(!showVideo)

  return (
    <section className="relative min-h-[90vh] flex items-center justify-center overflow-hidden">
      {/* Forest background with overlay */}
      <div className="absolute inset-0">
        <Image
          src="https://hebbkx1anhila5yf.public.blob.vercel-storage.com/forest.jpg-F1VHSiQQvCHKGAM9bym948Are3NLRK.jpeg"
          alt="Forest trail background"
          fill
          className="object-cover"
          priority
        />
        <div className="absolute inset-0 bg-[#2D4F1E]/60 mix-blend-multiply" />
        <div className="absolute inset-0 bg-gradient-to-b from-[#2D4F1E]/30 to-transparent" />
      </div>

      <div className="container mx-auto px-4 relative z-10">
        <div className="max-w-4xl mx-auto text-center">
          <div className="bg-[#2D4F1E]/30 backdrop-blur-sm p-8 rounded-[3rem] shadow-lg">
            <h1 className="text-4xl md:text-6xl font-bold mb-6 text-[#FAF6F1] leading-tight drop-shadow-lg">
              Transform Any Study Material into an AI-Powered Learning Experience
            </h1>
            <p className="text-xl md:text-2xl mb-8 text-[#FAF6F1] drop-shadow">
              Upload textbooks, PDFs, or notes and generate a fully structured course with AI-powered study guides,
              quizzes, and videos.
            </p>
            <div className="space-x-4">
              <Link
                href="/community"
                className="inline-block bg-[#FAF6F1] text-[#2D4F1E] px-8 py-4 rounded-full text-xl font-bold hover:transform hover:scale-105 transition-all duration-300 shadow-lg"
              >
                Join Our Community
              </Link>
              <button
                onClick={toggleVideo}
                className="inline-block bg-[#2D4F1E]/40 backdrop-blur-sm border-2 border-[#FAF6F1] text-[#FAF6F1] px-8 py-4 rounded-full text-xl font-bold hover:bg-[#2D4F1E]/60 transition-all duration-300"
              >
                Watch Demo
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Gradient overlay at bottom */}
      <div className="absolute bottom-0 left-0 w-full h-32 bg-gradient-to-t from-[#FAF6F1] to-transparent" />

      {showVideo && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg w-full max-w-4xl shadow-2xl">
            <div className="flex justify-end p-4">
              <button onClick={toggleVideo} className="text-gray-500 hover:text-gray-700">
                <X size={24} />
              </button>
            </div>
            <div className="px-8 pb-8">
              <div className="relative pb-[56.25%] h-0">
                <iframe
                  src="https://www.youtube.com/embed/dQw4w9WgXcQ"
                  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                  allowFullScreen
                  className="absolute top-0 left-0 w-full h-full rounded-lg"
                ></iframe>
              </div>
            </div>
          </div>
        </div>
      )}
    </section>
  )
}












 
===================================== 
 
File: Logo.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\public\ 
-------------------------------------------- 
'use client'
import Link from "next/link"
import Image from "next/image"

export default function Logo() {
  return (
    <Link href="/" className="flex items-center space-x-3">
      <div className="w-10 h-10 flex items-center justify-center rounded-full overflow-hidden">
        <Image
          src="https://hebbkx1anhila5yf.public.blob.vercel-storage.com/trail%20copy%20png%20icon-M3EHusVbHVSktiYuDPcKCkbldxV4hR.png"
          alt="Trail Logo"
          width={40}
          height={40}
          className="object-contain"
          style={{
            color: 'transparent',
            objectPosition: 'center',
            transform: 'scale(1.5)'
          }}
        />
      </div>
      <span className="text-2xl font-bold tracking-wider text-[#FAF6F1]">trail academy</span>
    </Link>
  )
}











 
===================================== 
 
File: CourseGrid.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ 
-------------------------------------------- 
import { Clock, Award, Beaker, User } from "lucide-react"

const courses = [
  {
    id: 1,
    title: "Introduction to Python Programming",
    image:
      "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/python-course-image-placeholder-Uy5Ue5Ue5Ue5Ue5Ue5Ue5Ue5Ue5Ue5.jpg",
    duration: "16 hours",
    tags: ["Human Instructor", "Integrated Labs", "Certification"],
  },
  {
    id: 2,
    title: "Web Development Bootcamp",
    image:
      "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/web-dev-course-image-placeholder-Uy5Ue5Ue5Ue5Ue5Ue5Ue5Ue5Ue5Ue5.jpg",
    duration: "40 hours",
    tags: ["Human Instructor", "Integrated Labs", "Certification"],
  },
  {
    id: 3,
    title: "Data Science Fundamentals",
    image:
      "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/data-science-course-image-placeholder-Uy5Ue5Ue5Ue5Ue5Ue5Ue5Ue5Ue5Ue5.jpg",
    duration: "24 hours",
    tags: ["Integrated Labs", "Certification"],
  },
  {
    id: 4,
    title: "Machine Learning Essentials",
    image:
      "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/ml-course-image-placeholder-Uy5Ue5Ue5Ue5Ue5Ue5Ue5Ue5Ue5Ue5.jpg",
    duration: "32 hours",
    tags: ["Human Instructor", "Integrated Labs"],
  },
  // Add more courses as needed
]

export default function CourseGrid() {
  return (
    <div className="flex-1">
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {courses.map((course) => (
          <div
            key={course.id}
            className="bg-white rounded-2xl shadow-md overflow-hidden hover:shadow-lg transition-shadow"
          >
            <img src={course.image || "/placeholder.svg"} alt={course.title} className="w-full h-48 object-cover" />
            <div className="p-4">
              <h3 className="text-lg font-semibold mb-2">{course.title}</h3>
              <div className="flex items-center text-sm text-gray-600 mb-2">
                <Clock className="w-4 h-4 mr-1" />
                <span>{course.duration}</span>
              </div>
              <div className="flex flex-wrap gap-2">
                {course.tags.map((tag) => (
                  <span
                    key={tag}
                    className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-[#2D4F1E]/10 text-[#2D4F1E]"
                  >
                    {tag === "Human Instructor" && <User className="w-3 h-3 mr-1" />}
                    {tag === "Integrated Labs" && <Beaker className="w-3 h-3 mr-1" />}
                    {tag === "Certification" && <Award className="w-3 h-3 mr-1" />}
                    {tag}
                  </span>
                ))}
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  )
}












 
===================================== 
 
File: CoursesSidebar.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ 
-------------------------------------------- 
import { ChevronDown } from "lucide-react"

const categories = [
  { name: "Computer Science", subcategories: ["Programming", "Web Development", "Data Science"] },
  { name: "Business", subcategories: ["Marketing", "Finance", "Entrepreneurship"] },
  { name: "Arts & Humanities", subcategories: ["History", "Philosophy", "Literature"] },
  { name: "Science", subcategories: ["Physics", "Biology", "Chemistry"] },
  { name: "Mathematics", subcategories: ["Algebra", "Calculus", "Statistics"] },
]

export default function CoursesSidebar() {
  return (
    <aside className="w-full md:w-64 bg-white rounded-2xl p-4 shadow-md">
      <h2 className="text-xl font-semibold mb-4">Categories</h2>
      <ul className="space-y-2">
        {categories.map((category) => (
          <li key={category.name} className="mb-2">
            <details className="group">
              <summary className="flex items-center justify-between cursor-pointer">
                <span>{category.name}</span>
                <ChevronDown className="h-5 w-5 transform group-open:rotate-180 transition-transform" />
              </summary>
              <ul className="mt-2 ml-4 space-y-1">
                {category.subcategories.map((subcategory) => (
                  <li key={subcategory}>
                    <a href="#" className="text-sm hover:text-[#8B4513] transition-colors">
                      {subcategory}
                    </a>
                  </li>
                ))}
              </ul>
            </details>
          </li>
        ))}
      </ul>
    </aside>
  )
}












 
===================================== 
 
File: Footer.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ 
-------------------------------------------- 
import Link from "next/link"
import { UnplugIcon } from "lucide-react"

export default function Footer() {
  const currentYear = new Date().getFullYear()

  return (
    <footer className="bg-[#2D4F1E] text-[#FAF6F1]/90">
      <div className="container mx-auto px-4 py-12">
        <div className="grid grid-cols-2 md:grid-cols-4 gap-8">
          <div>
            <h3 className="text-sm font-semibold text-[#FAF6F1] mb-3">Platform</h3>
            <ul className="space-y-2 text-sm">
              <li>
                <Link href="/courses">Courses</Link>
              </li>
              <li>
                <Link href="/pricing">Pricing</Link>
              </li>
            </ul>
          </div>
          <div>
            <h3 className="text-sm font-semibold text-[#FAF6F1] mb-3">Legal</h3>
            <ul className="space-y-2 text-sm">
              <li>
                <Link href="/terms">Terms</Link>
              </li>
              <li>
                <Link href="/privacy">Privacy</Link>
              </li>
              <li>
                <Link href="/cookies">Cookies</Link>
              </li>
            </ul>
          </div>
          <div>
            <h3 className="text-sm font-semibold text-[#FAF6F1] mb-3">Company</h3>
            <ul className="space-y-2 text-sm">
              <li>
                <Link href="/about">About</Link>
              </li>
              <li>
                <Link href="/community">Community</Link>
              </li>
            </ul>
          </div>
          <div>
            <h3 className="text-sm font-semibold text-[#FAF6F1] mb-3">Connect</h3>
            <div className="flex space-x-4">
              <Link href="https://discord.gg/3n7KPDxdtZ" className="hover:text-[#FAF6F1]">
                <UnplugIcon className="h-5 w-5" />
              </Link>
            </div>
          </div>
        </div>
        <div className="mt-8 pt-8 border-t border-[#FAF6F1]/10 text-sm text-center text-[#FAF6F1]/70">
          © {currentYear} trail academy, inc. All rights reserved.
        </div>
      </div>
    </footer>
  )
}












 
===================================== 
 
File: Navbar.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ 
-------------------------------------------- 
"use client"

import { useState, useEffect } from "react"
import Link from "next/link"
import { usePathname } from "next/navigation"
import Logo from "@/src/components/public/Logo"
import { Button } from "@/src/components/shared/ui/button"
import { Popup } from "@/src/components/shared/Popup"
import type React from "react"

export default function Navbar() {
  const [isClient, setIsClient] = useState(false)
  const [loadingState, setLoadingState] = useState(null)
  const [isPopupOpen, setIsPopupOpen] = useState(false)
  const pathname = usePathname()

  useEffect(() => {
    setIsClient(true)

    const checkLoadingState = () => {
      const keys = Object.keys(localStorage)
      const loadingStateKey = keys.find((key) => key.startsWith("loadingState_"))
      if (loadingStateKey) {
        const state = JSON.parse(localStorage.getItem(loadingStateKey))
        setLoadingState({
          courseId: loadingStateKey.split("_")[1],
          ...state,
        })
      } else {
        setLoadingState(null)
      }
    }

    checkLoadingState()
    window.addEventListener("storage", checkLoadingState)

    return () => {
      window.removeEventListener("storage", checkLoadingState)
    }
  }, [])

  const handleUnavailableFeature = (e: React.MouseEvent) => {
    e.preventDefault()
    setIsPopupOpen(true)
  }

  if (!isClient) return null

  return (
    <>
      <nav className="bg-[#2D4F1E] text-[#FAF6F1] p-4 sticky top-0 z-50 shadow-lg">
        <div className="container mx-auto flex justify-between items-center">
          <Logo />
          <div className="hidden md:flex space-x-6 items-center">
            <Link href="/courses" className="hover:text-[#FAF6F1]/80 transition">
              Courses
            </Link>
            <Link href="/guides" className="hover:text-[#FAF6F1]/80 transition">
              Guides
            </Link>
            <Link href="/mission" className="hover:text-[#FAF6F1]/80 transition">
              Mission
            </Link>
            <Link href="/community" className="hover:text-[#FAF6F1]/80 transition">
              Community
            </Link>
            <div className="flex items-center space-x-2">
              <Button
                onClick={handleUnavailableFeature}
                className="bg-[#FAF6F1] text-[#2D4F1E] px-4 py-2 rounded-full hover:bg-[#FAF6F1]/90 transition"
              >
                Login
              </Button>
              <Button
                onClick={handleUnavailableFeature}
                className="bg-[#FAF6F1] text-[#2D4F1E] px-4 py-2 rounded-full hover:bg-[#FAF6F1]/90 transition"
              >
                Sign Up
              </Button>
            </div>
          </div>
        </div>
        <Popup isOpen={isPopupOpen} onClose={() => setIsPopupOpen(false)} />
      </nav>
      {pathname === "/" && (
        <div className="bg-yellow-100 text-yellow-800 px-4 py-2 text-sm text-center">
          ⚠️ This is a DEMO page and does not reflect the final results or full scope of the platform.
        </div>
      )}
    </>
  )
} 
===================================== 
 
File: Popup.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ 
-------------------------------------------- 
"use client"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/src/components/shared/ui/dialog"
import { Button } from "@/src/components/shared/ui/button"

interface PopupProps {
  isOpen: boolean
  onClose: () => void
}

export function Popup({ isOpen, onClose }: PopupProps) {
  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Feature Unavailable</DialogTitle>
        </DialogHeader>
        <p>This feature is unavailable in the demo stage. Try again later!</p>
        <Button onClick={onClose} className="mt-4">
          Close
        </Button>
      </DialogContent>
    </Dialog>
  )
} 
===================================== 
 
File: accordion.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/src/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }











 
===================================== 
 
File: alert-dialog.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/src/lib/utils"
import { buttonVariants } from "@/src/components/shared/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}











 
===================================== 
 
File: alert.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/src/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }











 
===================================== 
 
File: aspect-ratio.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
"use client"

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }











 
===================================== 
 
File: avatar.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/src/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }











 
===================================== 
 
File: badge.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/src/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }











 
===================================== 
 
File: breadcrumb.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/src/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}











 
===================================== 
 
File: button.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/src/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary bg-background hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }











 
===================================== 
 
File: calendar.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/src/lib/utils"
import { buttonVariants } from "@/src/components/shared/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }











 
===================================== 
 
File: card.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
import * as React from "react"

import { cn } from "@/src/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }











 
===================================== 
 
File: carousel.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/src/lib/utils"
import { Button } from "@/src/components/shared/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}











 
===================================== 
 
File: chart.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/src/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}











 
===================================== 
 
File: checkbox.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/src/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }











 
===================================== 
 
File: collapsible.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }











 
===================================== 
 
File: command.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
"use client"

import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/src/lib/utils"
import { Dialog, DialogContent } from "@/src/components/shared/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }: DialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}











 
===================================== 
 
File: context-menu.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
"use client"

import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/src/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}











 
===================================== 
 
File: dialog.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/src/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogPrimitive.Overlay className="fixed inset-0 z-[25] bg-black/50 backdrop-blur-sm" />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      style={{ backgroundColor: "rgb(var(--background-rgb))" }}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}











 
===================================== 
 
File: drawer.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/src/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}











 
===================================== 
 
File: dropdown-menu.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/src/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}











 
===================================== 
 
File: form.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/src/lib/utils"
import { Label } from "@/src/components/shared/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}











 
===================================== 
 
File: hover-card.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/src/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }











 
===================================== 
 
File: input-otp.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
"use client"

import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/src/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }











 
===================================== 
 
File: input.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
import * as React from "react"

import { cn } from "@/src/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }











 
===================================== 
 
File: label.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/src/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }











 
===================================== 
 
File: menubar.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/src/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}











 
===================================== 
 
File: navigation-menu.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/src/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}











 
===================================== 
 
File: pagination.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/src/lib/utils"
import { ButtonProps, buttonVariants } from "@/src/components/shared/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}











 
===================================== 
 
File: popover.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/src/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }











 
===================================== 
 
File: progress.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/src/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }











 
===================================== 
 
File: radio-group.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/src/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }











 
===================================== 
 
File: resizable.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
"use client"

import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/src/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }











 
===================================== 
 
File: scroll-area.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/src/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }











 
===================================== 
 
File: select.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/src/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}











 
===================================== 
 
File: separator.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/src/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }











 
===================================== 
 
File: sheet.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/src/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}











 
===================================== 
 
File: sidebar.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/src/lib/utils"
import { Button } from "@/src/components/shared/ui/button"
import { Input } from "@/src/components/shared/ui/input"
import { Separator } from "@/src/components/shared/ui/separator"
import { Sheet, SheetContent } from "@/src/components/shared/ui/sheet"
import { Skeleton } from "@/src/components/shared/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/src/components/shared/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}











 
===================================== 
 
File: skeleton.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
import { cn } from "@/src/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }











 
===================================== 
 
File: slider.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/src/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }











 
===================================== 
 
File: sonner.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }











 
===================================== 
 
File: switch.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/src/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }











 
===================================== 
 
File: table.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
-------------------------------------------- 
import * as React from "react"

import { cn } from "@/src/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}











 
===================================== 
 
File: tabs.tsx 
Path: C:\Users\jdevi\Downloads\CURRENT_PROJECT_TRAIL\GITHUB CLONE\trailacademy-frontend-real\src\components\shared\ui\ 
